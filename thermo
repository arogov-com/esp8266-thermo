#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (C) 2017 Aleksey Rogov <alex@arogov.com> . All rights reserved.

import time
import sqlite3
import zlib
import binascii
import hashlib
import os
import sys

keys = ('1234567890qwertyuiop_asdfghjklzxcvbnm-ASDFGHJKLZ', )

dbname = 'thermo.sqlite'
FW_FILE = 'main.py'

if os.environ['REQUEST_METHOD'] == 'POST':
    data = sys.stdin.read()
    POST = {i.split('=')[0]: i.split('=')[1] for i in data.split('&')}
    key = POST.get('key')
    sid = POST.get('sid')
    mac = POST.get('mac')
    temp = POST.get('temp')
    pres = POST.get('pres')
    hum = POST.get('hum')
    adc = POST.get('adc')
    sha1 = POST.get('sha1')

    if key not in keys:
        print('Content-type: application/json', end='\r\n\r\n')
        print('{"status":false,"reason":"invalid key"}', end='\r\n')
        exit()
    if not sid or not mac or not temp or not pres or not hum or not adc or not sha1:
        print('Content-type: application/json', end='\r\n\r\n')
        print('{"status":false,"reason":"parameter missmatch"}', end='\r\n')
        exit()

    fw_file = open(FW_FILE, 'rb')
    fw_content = fw_file.read()
    fw_file.close()
    fw_sha1 = binascii.hexlify(hashlib.sha1(fw_content).digest()).decode('utf-8')

    if fw_sha1 != sha1:
        print('Content-type: application/octet-stream', end='\r\n\r\n')
        print(f'{{"status":true,"reason":"data accepted","sha1":"{fw_sha1}"}}', end='\r\n')
        z = zlib.compress(fw_content, 9)
        b = binascii.b2a_base64(z)
        print(b.decode('utf-8'), end='')
    else:
        print('Content-type: application/json', end='\r\n\r\n')
        print('{"status":true,"reason":"data accepted"}', end='\r\n')

    tnow = int(time.time())
    conn = sqlite3.connect(dbname)
    cur = conn.cursor()
    cur.execute('INSERT INTO thermo VALUES(NULL,?,?,?,?,?,?,?,?,?)', (str(tnow),
                str(key), str(sid), str(mac), str(temp), str(hum), str(pres), str(adc), str(sha1)))
    conn.commit()
    conn.close()
elif os.environ['REQUEST_METHOD'] == 'GET':
    query = os.environ['QUERY_STRING']
    GET = {i.split('=')[0]: i.split('=')[1] for i in query.split('&')}
    view = GET.get('view')
    if not view:
        print('Content-type: application/json', end='\r\n\r\n')
        print('{"status":false,"reason":"parameter missmatch"}', end='\r\n')
        exit()
    elif view == '1':
        print('Content-type: application/json', end='\r\n\r\n')
        conn = sqlite3.connect(dbname)
        cur = conn.cursor()
        for row in cur.execute('SELECT id, datetime(time+3600*5, \'unixepoch\'), temp, hum, press/100, adc/1024.0*4.14 FROM thermo ORDER BY time DESC'):
            print(row)
        conn.close()
        exit()

    print('Content-type: application/json', end='\r\n\r\n')
    print('{"status":true,"reason":"nothing todo"}', end='\r\n')
    exit()
else:
    print('Content-type: application/json', end='\r\n\r\n')
    print('{"status":false,"reason":"invalid method"}', end='\r\n')
